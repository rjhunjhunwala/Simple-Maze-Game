/**
	* Maze Game in under 200 lines. Decided it was time to clean up past code.
	* This implementation is much more efficient, and is much cleaner.
	*/
package mazegame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Arrays;
import java.util.Stack;
import javax.swing.*;

/**
 * Simple Maze Game
 * @author rohan
 */
public class MazeGame {

	public static class GamePanel extends JPanel {

		private static final long serialVersionUID = 1L;

		@Override
		public Dimension getPreferredSize() {
			return new Dimension(640, 640);
		}

		@Override
		public void paintComponent(Graphics g) {
			for (int y = 0; y < maze[0].length; y++) {
				for (int x = 0; x < maze.length; x++) {
					g.setColor(maze[x][y] ? Color.black : Color.green);
					g.fillRect(x * 10, y * 10, 10, 10);
				}
			}
			g.setColor(Color.blue);
			g.fillOval(Player.x*10, Player.y*10,10, 10);
		}
	}

	public static class Player {

		public static int x = 1, y = 1;
		private static final long serialVersionUID = 1L;

		public static void move(char m) {
			int tX = x, tY = y;
			switch (m) {
				case 'w':
					tY--;
					break;
				case 'a':
					tX--;
					break;
				case 's':
					tY++;
					break;
				case 'd':
					tX++;
					break;
			}
		if(inBounds(tX,tY)&&maze[tX][tY]){
			x=tX;
			y=tY;
		}
		}
	}

	public static class GameFrame extends JFrame {

		private static final long serialVersionUID = 1L;

		public GameFrame() {
			super("Maze Game");
			this.add(new GamePanel());
			this.pack();
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			this.setVisible(true);
			this.setResizable(false);
			this.setLocationRelativeTo(null);
			this.addKeyListener(new KeyListener() {

				@Override
				public void keyTyped(KeyEvent e) {

				}

				@Override
				public void keyPressed(KeyEvent e) {
					Player.move(e.getKeyChar());
				}

				@Override
				public void keyReleased(KeyEvent e) {

				}
			});
		}
	}
	/**
		* The boolean at maze[x][y] is whether or not that spot is open
		*/
	public static boolean[][] maze;

	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args) {
		makeMaze();
		GameFrame frame = new GameFrame();
		while (true) {
			frame.repaint();
		}
	}

	public static class Coord {

		public final int x, y;

		Coord(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	public static Stack<Coord> nodes = new Stack<>();

	public static void makeMaze() {
		maze = new boolean[65][65];
		nodes.push(new Coord(1, 1));
		while (!nodes.empty()) {
			findNewNode();
		}
	}

	public static void findNewNode() {
		Coord c = nodes.peek();
		int x = c.x;
		int y = c.y;

		int startCase = (int) (Math.random() * 4);

		for (int i = 0; i < 4; i++) {
			int attemptX = x, attemptY = y;
			switch (startCase) {
				case 0:
					attemptX += 2;
					break;
				case 1:
					attemptX -= 2;
					break;
				case 2:
					attemptY += 2;
					break;
				case 3:
					attemptY -= 2;
					break;
			}
			if (inBounds(attemptX, attemptY)) {
				if (!maze[attemptX][attemptY]) {
					maze[attemptX][attemptY] = true;
					maze[x + ((attemptX - x) / 2)][y + ((attemptY - y) / 2)] = true;
					nodes.push(new Coord(attemptX, attemptY));
					return;
				}
			}
			startCase += 1;
			startCase %= 4;
		}
		nodes.pop();
	}

	public static boolean inBounds(int x, int y) {
		return x > 0 && y > 0 && x < maze.length && y < maze[x].length;
	}
}
